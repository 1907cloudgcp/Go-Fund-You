pipeline {
    agent any
    environment {
            PROJECT_ID = 'project-2-251819'
            CLUSTER_NAME = 'jenkins-cd'
            ZONE = 'us-central1-a'
            DATABASE_NAME = credentials('database-name')
            JDBC_SCHEMA = credentials('jdbc-schema')
            JDBC_URL = credentials('jdbc-url')
            JDBC_USERNAME = credentials('jdbc-username')
            JDBC_PASSWORD = credentials('jdbc-password')
    }
    stages {
        stage('Maven Build') {
            steps {
                echo 'Maven Build'
                sh 'mvn install'
            }
        }
        stage('Build Image') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gcr-credentials-file', variable: 'GC_KEY')]) {
                        sh('gcloud auth activate-service-account --key-file=${GC_KEY}')
                        echo 'Docker Build Image'
                        sh('docker build -t gcr.io/${PROJECT_ID}/go-fund-you:productionlatest -f ./devops/Dockerfile --build-arg DATABASE_NAME=${DATABASE_NAME} --build-arg JDBC_SCHEMA=${JDBC_SCHEMA} --build-arg JDBC_URL=${JDBC_URL} --build-arg JDBC_USERNAME=${JDBC_USERNAME} --build-arg JDBC_PASSWORD=${JDBC_PASSWORD} .')
                        echo 'Docker Push Image'
                        sh('gcloud docker -- push gcr.io/${PROJECT_ID}/go-fund-you:productionlatest')
                    }
                }
            }
        }
        /*
        stage('Deploy') {
            steps {
                withCredentials([file(credentialsId: 'gke-credentials', variable: 'GKE_KEY')]) {
                    sh('gcloud auth activate-service-account --key-file=${GKE_KEY}')
                    echo 'Deploying to Kubernetes'
                    sh('gcloud container clusters get-credentials ${CLUSTER_NAME} --zone ${ZONE}')
                    sh('kubectl set image deployments/gfy-deployment go-fund-you=gcr.io/${PROJECT_ID}/go-fund-you:productionlatest')
                }
            }
        }
        */
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
    }
}
